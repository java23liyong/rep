<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--1.开启注解扫描：spring框架只负责扫描dao和service-->
    <!--2.spring整合Mybatis框架,整合后就不需要mybatis的配置文件了-->
                <!--配置连接池-->
                <!-- 配置SqlSessionFactory工厂-->
                <!--配置UserDao接口所在包-->
    <!--3.配置Spring的声明式事务管理-->

    <mvc:annotation-driven />

    <!-- 1.开启注解扫描：spring框架只负责扫描dao和service，controller不需要spring框架去处理-->
    <context:component-scan base-package="com.ssm">
        <!--过滤:配置哪些注解不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--2.spring整合Mybatis框架-->
        <!-- (1)配置SqlSessionFactory工厂，构建工厂，将代理对象存到容器中-->
                <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                        <!--需要引入连接池-->
                        <property name="dataSource" ref="dataSource"></property>
                </bean>
        <!--下面两个其实就是sqlMapConfig.xml中的mybatis配置文件(稍有区别)，是spring把他们拿过来整合了mybatis-->

                    <!--  (2)配置连接池c3p0    -->
                    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
                        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/login?characterEncoding=utf-8"/>
                        <property name="user" value="root"/>
                        <property name="password" value="root"/>
                    </bean>



                <!--   (3)配置UserDao接口所在包：想要dao代理对象，需要告诉dao所在包-->
                        <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                                <property name="basePackage" value="com.ssm.dao"></property>
                        </bean>



    <!--3.配置Spring的声明式事务管理-->
            <!--配置事务管理器 :提供重复代码的通知-->
            <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <!--需要引入连接池对象-->
                <property name="dataSource" ref="dataSource"></property>
            </bean>

            <!--配置事务通知-->
            <tx:advice id="txAdvice" transaction-manager="transactionManager">
                    <tx:attributes>
                        <tx:method name="find" read-only="true"/>   <!--以find开头的方法，设置为只读-->
                        <tx:method name="*" isolation="DEFAULT"/>   <!--事务隔离级别-->
                    </tx:attributes>
            </tx:advice>
                    <!--   属性	                        类型	            默认值	        说明
                        propagation	             Propagation枚举	       REQUIRED	    事务传播属性 (下有说明)
                        isolation	            isolation枚举	           DEFAULT	    事务隔离级别 (另有说明)
                        readOnly	            boolean	                   false	    是否只读
                        timeout	                int	                        -1	        超时(秒)
                        rollbackFor	            Class[]	                    {}	        需要回滚的异常类
                        rollbackForClassName	String[]	                {}	        需要回滚的异常类名
                        noRollbackFor	        Class[]	                    {}	        不需要回滚的异常类
                        noRollbackForClassName	String[]	                {}	        不需要回滚的异常类名-->

            <!--配置aop增强-->
            <aop:config>
                <!--引用事务通知-->
                <!--  pointcut="execution(* com.itssm.service.impl.*ServiceImpl.*(..))"
                        切入点的表达式 :  切入service/impl/的所有的类中的所有的方法，任意类型的参数-->
                <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.ssm.service.impl.*ServiceImpl.*(..))"></aop:advisor>
            </aop:config>





</beans>